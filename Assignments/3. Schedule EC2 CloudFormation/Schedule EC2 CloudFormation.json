{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "CopyRights": {
            "Type": "String",
            "Description": "Copyright (c) [2023] @sky9262. All rights reserved. This software is protected by copyright laws and international copyright treaties, as well as other intellectual property laws and treaties. The code may not be reproduced or distributed in any form or by any means, without the prior written permission of the copyright holder.",
            "ConstraintDescription": "Please choose \"Accept\" to accept the copyright terms.",
            "AllowedPattern": "^Accept$",
            "AllowedValues": [
                "Reject",
                "Accept"
            ]
        },
        "StartScheduleExpression": {
            "Type": "String",
            "Description": "Type the schedule cron expression to start the instanses according to Universal Time Coordinated (UTC). Eg: cron(47 8 * * ? *) . Ref: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
        },
        "StopScheduleExpression": {
            "Type": "String",
            "Description": "Type the schedule cron expression to stop the instanses according to Universal Time Coordinated (UTC). Eg: cron(33 9 * * ? *) . Ref: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
        },
        "ImageId": {
            "Type": "String",
            "Description": "Linux 2 AMI for Ireland eu-west1 Region",
            "Default": "ami-0b5eea76982371e91",
            "AllowedValues": [
                "ami-0b5eea76982371e91",
                "ami-0fe472d8a85bc7b0e",
                "ami-005b11f8b84489615"
            ]
        },
        "InstanceType": {
            "Type": "String",
            "Description": "Choosing  t2 micro because it is free",
            "Default": "t3.micro",
            "AllowedValues": [
                "t3.micro",
                "t2.micro",
                "t2.nano",
                "t3.nano"
            ]
        }
    },
    "Resources": {
        "SheduleEC2": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ScheduleEC2LambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "VisualEditor0",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInstances",
                                        "ec2:StartInstances",
                                        "ec2:DescribeTags",
                                        "logs:*",
                                        "ec2:DescribeInstanceTypes",
                                        "ec2:StopInstances",
                                        "ec2:DescribeInstanceStatus"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ScheduleEC2LambdaPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ScheduleEC2LambdaPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeInstances",
                                "ec2:StartInstances",
                                "ec2:DescribeTags",
                                "logs:*",
                                "ec2:DescribeInstanceTypes",
                                "ec2:StopInstances",
                                "ec2:DescribeInstanceStatus"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Users": [
                    {
                        "Ref": "ScheduleEC2User"
                    }
                ]
            },
            "DependsOn": [
                "ScheduleEC2User"
            ]
        },
        "WebServer": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0b5eea76982371e91",
                "InstanceType": "t3.micro",
                "KeyName": "AnimeWebServerKey",
                "SecurityGroupIds": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ScheduleLinuxServer"
                    },
                    {
                        "Key": "Env",
                        "Value": "Scheduled10AMto06PM"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nyum update -y\nyum install -y httpd.x86_64\nsystemctl start httpd.service\nsystemctl enable httpd.service\nyum install -y git\ngit clone https://github.com/falselunatic/Anime.git\nmv ./Anime/* /var/www/html/\necho \"stopping instance\"\nsudo shutdown -h now\n"
                    }
                }
            },
            "DependsOn": [
                "AnimeWebServerKey"
            ]
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SG to allow http access via port 80",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2-WebServer"
                    }
                ]
            }
        },
        "AnimeWebServerKey": {
            "Type": "AWS::EC2::KeyPair",
            "Properties": {
                "KeyName": "AnimeWebServerKey"
            }
        },
        "StopEC2Function": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "StopEC2Function",
                "Role": {
                    "Fn::GetAtt": [
                        "SheduleEC2",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "Handler": "index.my_handler",
                "Code": {
                    "ZipFile": "import boto3\ndef my_handler(event, context):\n   ec2 = boto3.client('ec2')\n   instances = ec2.describe_instances(Filters=[\n       {\n           'Name': 'instance-state-name',\n           'Values': ['running', 'stopped']\n       }\n   ])\n   filtered_instances = []\n   for reservation in instances['Reservations']:\n       for instance in reservation['Instances']:\n           for tag in instance['Tags']:\n               if tag['Key'] == 'Env' and tag['Value'] == 'Scheduled10AMto06PM':\n                   filtered_instances.append(instance)\n   instance_ids = [instance['InstanceId'] for instance in filtered_instances]\n   ec2.stop_instances(InstanceIds=instance_ids)"
                }
            }
        },
        "StartEC2Function": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "StartEC2Function",
                "Role": {
                    "Fn::GetAtt": [
                        "SheduleEC2",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "Handler": "index.my_handler",
                "Code": {
                    "ZipFile": "import boto3\ndef my_handler(event, context):\n   ec2 = boto3.client('ec2')\n   instances = ec2.describe_instances(Filters=[\n       {\n           'Name': 'instance-state-name',\n           'Values': ['running', 'stopped']\n       }\n   ])\n   filtered_instances = []\n   for reservation in instances['Reservations']:\n       for instance in reservation['Instances']:\n           for tag in instance['Tags']:\n               if tag['Key'] == 'Env' and tag['Value'] == 'Scheduled10AMto06PM':\n                   filtered_instances.append(instance)\n   instance_ids = [instance['InstanceId'] for instance in filtered_instances]\n   ec2.start_instances(InstanceIds=instance_ids)"
                }
            }
        },
        "StopEC2FunctionRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": {
                    "Ref": "StopScheduleExpression"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "StopEC2Function",
                        "Arn": {
                            "Fn::GetAtt": [
                                "StopEC2Function",
                                "Arn"
                            ]
                        }
                    }
                ]
            },
            "DependsOn": [
                "StopEC2Function"
            ]
        },
        "StopEC2FunctionPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StopEC2Function",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "StopEC2FunctionRule",
                        "Arn"
                    ]
                }
            }
        },
        "StartEC2FunctionRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "ScheduleExpression": {
                    "Ref": "StartScheduleExpression"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "StartEC2Function",
                        "Arn": {
                            "Fn::GetAtt": [
                                "StartEC2Function",
                                "Arn"
                            ]
                        }
                    }
                ]
            },
            "DependsOn": [
                "StartEC2Function"
            ]
        },
        "StartEC2FunctionPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StartEC2Function",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "StartEC2FunctionRule",
                        "Arn"
                    ]
                }
            }
        },
        "ScheduleEC2User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "UserName": "ScheduleEC2User"
            }
        }
    }
}
